{"version":3,"file":"static/js/491.0538699e.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,YAAc,6BAA6B,KAAO,sBAAsB,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,0BAA0B,OAAS,yB,6BCQjQA,EAAc,SAACC,GAC1B,IAAIC,EAASD,EAAME,YAAYC,KAAI,SAACC,EAAGC,GACrC,IAAIC,EAAO,YAAcF,EAAEG,GAC3B,OAAQ,iBAAaC,UAAWC,EAAAA,OAAxB,WACN,gBAAKC,IAAI,yEAAyEC,IAAI,MACtF,UAAE,KAAF,CAAUC,GAAIN,EAAME,UAAWC,EAAAA,KAA/B,cAAyCL,EAAES,UAF3BR,MAKpB,OACE,gBAAKG,UAAWC,EAAAA,YAAhB,SACGR,KCZMa,EAAc,SAACd,GACxB,IAAIe,EAAcf,EAAMgB,aAAab,KAAI,SAACC,EAAEC,GAAH,OAAS,cAAGG,UAAWC,EAAAA,QAAd,SAAkCL,EAAEa,SAANZ,MAChF,OACI,yBACKU,K,uCCFPG,GAAqBC,EAAAA,EAAAA,GAAiB,IAgB/BC,GAAcC,EAAAA,EAAAA,GAA2B,CAACC,KAAM,WAAlCD,EAd6C,SAACrB,GAErE,OACI,kBAAMuB,SAAUvB,EAAMwB,aAAtB,WACI,gBAAKhB,UAAWC,EAAAA,SAAhB,UACA,SAACgB,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUd,KAAK,UAAUe,YAAY,UAAUC,SAAU,CAACC,EAAAA,EAAUZ,QAEtF,0BACI,oD,8BCShB,GAAea,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAboB,SAACC,GACrB,MAAO,CACLC,MAAOD,EAAME,gBAGQ,SAACC,GACxB,MAAO,CACLC,WAAY,SAACpB,GACXmB,GAASE,EAAAA,EAAAA,GAAarB,SAM1BsB,EAAAA,EAFF,EChBuB,SAACvC,GAKtB,OACE,iBAAKQ,UAAWC,EAAAA,QAAhB,WACE,SAACV,EAAD,CAAaG,YAAaF,EAAMkC,MAAMhC,eACtC,iBAAKM,UAAWC,EAAAA,SAAhB,WACE,SAACK,EAAD,CAAaE,aAAchB,EAAMkC,MAAMlB,gBACvC,SAACI,EAAD,CAAaG,SARO,SAACiB,GACzBxC,EAAMqC,WAAWG,EAASvB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/MessageForm/MessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__1Y7Vr\",\"dialogsItem\":\"Dialogs_dialogsItem__zCqBH\",\"name\":\"Dialogs_name__QbD2k\",\"active\":\"Dialogs_active__ciLAf\",\"dialog\":\"Dialogs_dialog__tVuC5\",\"message\":\"Dialogs_message__DXQnM\",\"textarea\":\"Dialogs_textarea__zuI1X\",\"button\":\"Dialogs_button__-7Q0t\"};","import c from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {DialogsDataType} from '../../../types/types';\r\n\r\ntype DialogsItemPropsType = {\r\n  dialogsData: Array<DialogsDataType>,\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemPropsType) => {\r\n  let dialog = props.dialogsData.map((e, i) => {\r\n    let path = '/dialogs/' + e.id\r\n    return (<div key={i} className={c.dialog}>\r\n      <img src=\"https://cdn-0.emojis.wiki/emoji-pics/twitter/orange-circle-twitter.png\" alt=\"\"/>\r\n      < NavLink to={path} className={c.name}> {e.name}</NavLink>\r\n    </div>)\r\n  })\r\n  return (\r\n    <div className={c.dialogsItem}>\r\n      {dialog}\r\n    </div>\r\n  )\r\n}","import c from \"../Dialogs.module.css\";\r\nimport {MessagesData} from '../../../types/types';\r\n\r\nexport type MessageItemPropsType={\r\n    messagesData:Array<MessagesData>\r\n}\r\n\r\nexport const MessageItem = (props:MessageItemPropsType) => {\r\n    let messageItem = props.messagesData.map((e,i) => <p className={c.message} key={i}>{e.message}</p> )\r\n    return (\r\n        <div >\r\n            {messageItem}\r\n        </div>\r\n    )\r\n}","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport c from '../Dialogs.module.css'\r\nimport {Textarea} from \"../../common/FormControl/FormControl\";\r\nimport {maxLengthCreator, required} from \"../../../util/valodator/validators\";\r\n\r\nexport type FormMessageType = {\r\n    message: string\r\n}\r\nconst maxLengthMessage10 = maxLengthCreator(50)\r\n\r\nexport const AddMessage: React.FC<InjectedFormProps<FormMessageType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={c.textarea}>\r\n            <Field component={Textarea} name='message' placeholder='Message' validate={[required, maxLengthMessage10]} />\r\n            </div>\r\n            <div >\r\n                <button >Add Message</button>\r\n            </div>\r\n            </form>\r\n            )\r\n}\r\n\r\nexport const MessageForm = reduxForm<FormMessageType>({form: 'message'})(AddMessage)","import {AddMessageAC} from '../../redux/DialoguesPageReducer';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux_store';\nimport {compose, Dispatch} from 'redux';\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\nimport React from 'react';\nimport {DialogsPageType} from '../../types/types';\n\ntype MapStateToPropsType = {\n  items: DialogsPageType\n}\ntype MapDispatchToPropsType = {\n  addMessage: (message: string) => void\n}\n\nlet mapStateToProps = (store: AppStateType): MapStateToPropsType => {\n  return {\n    items: store.dialogsPage\n  }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addMessage: (message: string) => {\n      dispatch(AddMessageAC(message))\n    }\n  }\n}\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  WithAuthRedirect,\n)(Dialogs)","import c from './Dialogs.module.css'\nimport {DialogsItem,} from './DialogsItem/DialogsItem';\nimport {MessageItem,} from './MessageItem/MessageItem';\nimport React from 'react';\nimport {FormMessageType, MessageForm} from './MessageForm/MessageForm';\nimport {DialogsPageType} from '../../types/types';\n\nexport type DialogsPropsType = {\n  addMessage: (message: string) => void\n  items: DialogsPageType\n}\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n  const addMessageHandler = (formData: FormMessageType) => {\n    props.addMessage(formData.message)\n  }\n  return (\n    <div className={c.dialogs}>\n      <DialogsItem dialogsData={props.items.dialogsData}/>\n      <div className={c.messages}>\n        <MessageItem messagesData={props.items.messagesData}/>\n        <MessageForm onSubmit={addMessageHandler}/>\n      </div>\n\n    </div>\n  )\n}"],"names":["DialogsItem","props","dialog","dialogsData","map","e","i","path","id","className","c","src","alt","to","name","MessageItem","messageItem","messagesData","message","maxLengthMessage10","maxLengthCreator","MessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","store","items","dialogsPage","dispatch","addMessage","AddMessageAC","WithAuthRedirect","formData"],"sourceRoot":""}